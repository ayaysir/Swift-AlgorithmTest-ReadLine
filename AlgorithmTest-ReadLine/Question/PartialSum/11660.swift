//
//  11660.swift
//  AlgorithmTest-ReadLine
//
//  Created by 윤범태 on 3/20/2024.
//
//  5: 구간 합 구하기 5 https://www.acmicpc.net/problem/11660
//

import Foundation

/// 구간 합 구하기 5 https://www.acmicpc.net/problem/11660
func Q_11660() {
    let rl = readLine()!.split(separator: " ").map { Int($0)! }
    let (n, m) = (rl[0], rl[1])
    
    var matrix: [[Int]] = [.init(repeating: 0, count: n + 1)]
    for _ in 0..<n {
        matrix.append([0] + readLine()!.split(separator: " ").map { Int($0)! })
    }
    
    // 2차원 누적합
    for i in 1...n {
        for j in 1...n {
            // 기준값의 왼쪽, 위쪽에서 값을 가져와 더하고, 대각선 방향을 뺌
            matrix[i][j] += matrix[i][j-1] + matrix[i-1][j] - matrix[i-1][j-1]
        }
    }
    
    var commands: [(x1: Int, y1: Int, x2: Int, y2: Int)] = []
    for _ in 0..<m {
        let rl = readLine()!.split(separator: " ").map { Int($0)! }
        commands.append((rl[0], rl[1], rl[2], rl[3]))
    }
    
    var result = ""
    for c in commands {
        /*
         방향주의!!
               y
           +---+---+
           | 1 | 2 |
         x +---+---+
           | 3 | 4 |
           +---+---+
         (x = 1, y = 2) => 2
         (x = 2, y = 1) => 3
         */
        
        let sum = matrix[c.x2][c.y2] // dp[x2][y2]
        + matrix[c.x1 - 1][c.y1 - 1] // 🟪 꼬다리
        - matrix[c.x2][c.y1 - 1] // 🟩 세로 영역
        - matrix[c.x1 - 1][c.y2] // 🟧 가로 영역
        
        result += "\(sum)\n"
    }
    
    print(result)
}

/*
 [풀이] https://jominseoo.tistory.com/101
 1. 2차원 누적합 그리기
  => 기준값의 왼쪽, 위쪽에서 값을 가져와 더하고, 대각선 방향을 뺌
  => 이때 가져오는 값은 전부 이미 누적이 되어 있어야 함
  => 가로 세로에 0행을 추가한 뒤 처음부터 점화식을 사용하는 것이 좋음
 +---+---+   +---+---+   +---+---+   +---+---+
 | 1 | 2 |   | 1 → 3 |   | 1 | 3 |   | 1 | 3 |
 +---+---+   +-↓-+---+   +---+-↓-+   +---↖---+
 | 2 | 3 |   | 3 | 3 |   | 3 → 6 |   | 3 | 5 |
 +---+---+   +---+---+   +---+---+   +---+---+
  원본 배열                             누적 배열
 
 2. 범위의 합 구하는 방법 : -> 2차원 합배열에서 (1) 범위 가장 좌상의 꼬다리를 찾는다
 ⬜️⬜️⬜️⬜️                       🟪⬜️⬜️⬜️
 ⬜️🟨🟨🟨                       ⬜️🟨🟨🟨
 ⬜️🟨🟨🟨                       ⬜️🟨🟨🟨
 ⬜️⬜️⬜️⬜️                       ⬜️⬜️⬜️⬜️
 
 (2) 꼬다리를 기준으로 노란색 범위를 벗어나지 않는 1칸 너비/높이의 가로 세로 영역을 찾는다.
 🟩⬜️⬜️⬜️                       🟧🟧🟧🟧
 🟩🟨🟨🟨                       ⬜️🟨🟨🟨
 🟩🟨🟨🟨                       ⬜️🟨🟨🟨
 ⬜️⬜️⬜️⬜️                       ⬜️⬜️⬜️⬜️
 
 (3) 🟨 노란색 누적합 = dp[x2][y2] - 🟧 영역 - 🟩 영역 + 🟪 꼬다리
  - dp[x2][y2]는 찾고자 하는 범위의 가장 오른쪽 하단 칸
  - 꼬다리를 더하는 이유는 가로세로 영역에서 꼬다리 칸이 중복되므로
  - answer = dp[x2][y2] - dp[x2][y1 - 1] - dp[x1 - 1][y2] + [x1 - 1][y1 - 1]
 
 
 ----------------
 
 문제
 N×N개의 수가 N×N 크기의 표에 채워져 있다. (x1, y1)부터 (x2, y2)까지 합을 구하는 프로그램을 작성하시오. (x, y)는 x행 y열을 의미한다.

 예를 들어, N = 4이고, 표가 아래와 같이 채워져 있는 경우를 살펴보자.

 1    2    3    4
 2    3    4    5
 3    4    5    6
 4    5    6    7
 여기서 (2, 2)부터 (3, 4)까지 합을 구하면 3+4+5+4+5+6 = 27이고, (4, 4)부터 (4, 4)까지 합을 구하면 7이다.

 표에 채워져 있는 수와 합을 구하는 연산이 주어졌을 때, 이를 처리하는 프로그램을 작성하시오.

 입력
 첫째 줄에 표의 크기 N과 합을 구해야 하는 횟수 M이 주어진다. (1 ≤ N ≤ 1024, 1 ≤ M ≤ 100,000) 둘째 줄부터 N개의 줄에는 표에 채워져 있는 수가 1행부터 차례대로 주어진다. 다음 M개의 줄에는 네 개의 정수 x1, y1, x2, y2 가 주어지며, (x1, y1)부터 (x2, y2)의 합을 구해 출력해야 한다. 표에 채워져 있는 수는 1,000보다 작거나 같은 자연수이다. (x1 ≤ x2, y1 ≤ y2)

 출력
 총 M줄에 걸쳐 (x1, y1)부터 (x2, y2)까지 합을 구해 출력한다.

 예제 입력 1
 4 3
 1 2 3 4
 2 3 4 5
 3 4 5 6
 4 5 6 7
 2 2 3 4
 3 4 3 4
 1 1 4 4
 예제 출력 1
 27
 6
 64
 
 예제 입력 2
 2 4
 1 2
 3 4
 1 1 1 1
 1 2 1 2
 2 1 2 1
 2 2 2 2
 예제 출력 2
 1
 2
 3
 4
 */
