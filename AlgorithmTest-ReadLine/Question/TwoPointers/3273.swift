//
//  3273.swift
//  AlgorithmTest-ReadLine
//
//  Created by 윤범태 on 4/5/2024.
//
//  1: 두 수의 합 https://www.acmicpc.net/problem/3273
//

import Foundation

/// 두 수의 합 https://www.acmicpc.net/problem/3273
func Q_3273() {
    let n = Int(readLine()!)!
    let numbers = readLine()!.split(separator: " ").map { Int($0)! }.sorted()
    let x = Int(readLine()!)!
    var result = 0
    
    var (l, r) = (0, n - 1)
    
    while l < r {
        if x == numbers[l] + numbers[r] {
            // 두개가 합이 x(->정답)이면 두 숫자는 다른곳에 나올 일 없음
            l += 1
            r -= 1
            result += 1
        } else if x < numbers[l] + numbers[r] {
            // 두개 합이 x보다 크면 오른쪽 (큰 숫자) 위치를 줄여야 함 -> 그래야 더 낮은 숫자가 나올 것이므로
            r -= 1
        } else {
            // 두개 합이 x보다 작으면 왼쪽 (작은 숫자) 위치를 줄여야 함
            l += 1
        }
    }
    
    print(result)
}

/*
 [풀이]
 - 투포인터 문제
 - 오름차순 정렬 필요: O(NlogN + N)으로 시간초과 발생 안함
 - 포인터 2개를 만든 뒤, 양 끝에 배치
   - 두 숫자가 x(목표값)과 같다면 두 숫자는 더 이상 사용할 일이 없으므로 양쪽 포인터를 좁힌다.
   - 두개 합이 x보다 크면 오른쪽 (큰 숫자) 위치를 줄여야 함 -> 그래야 더 낮은 숫자가 나올 것이므로
   - 두개 합이 x보다 작으면 왼쪽 (작은 숫자) 위치를 줄여야 함 -> 그래야 더 높은 숫자가 나올 것이므로
 
 [주의]
 - 처음에 부등호 방향을 반대로 했는데(27라인) 많은 케이스들이 통과 => 우연의 일치일 뿐이었으므로 조심
 
 ----------
 
 문제
 n개의 서로 다른 양의 정수 a1, a2, ..., an으로 이루어진 수열이 있다. ai의 값은 1보다 크거나 같고, 1000000보다 작거나 같은 자연수이다. 자연수 x가 주어졌을 때, ai + aj = x (1 ≤ i < j ≤ n)을 만족하는 (ai, aj)쌍의 수를 구하는 프로그램을 작성하시오.

 입력
 첫째 줄에 수열의 크기 n이 주어진다. 다음 줄에는 수열에 포함되는 수가 주어진다. 셋째 줄에는 x가 주어진다. (1 ≤ n ≤ 100000, 1 ≤ x ≤ 2000000)

 출력
 문제의 조건을 만족하는 쌍의 개수를 출력한다.

 예제 입력 1
 9
 5 12 7 10 9 1 2 3 11
 13
 
 예제 출력 1
 3
 
 ----------
 
 [반례]
2
1 2
13

 답 : 0

2
1 13
2

 답 : 0
 
5
10 2 6 3 5
8
 
 답: 2
 */
