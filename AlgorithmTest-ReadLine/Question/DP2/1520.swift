//
//  1520.swift
//  AlgorithmTest-ReadLine
//
//  Created by 윤범태 on 3/27/2024.
//
//  3: 내리막 길 https://www.acmicpc.net/problem/1520
//

import Foundation

/// 내리막 길 https://www.acmicpc.net/problem/1520
func Q_1520() {
    let size = readLine()!.split(separator: " ").map { Int($0)! }
    let (m, n) = (size[0], size[1])
    let land = (0..<m).map { _ in readLine()!.split(separator: " ").map { Int($0)! }}
    
    let dir: [(y: Int, x: Int)] = [(0, 1), (1, 0), (0, -1), (-1, 0)]
    var dp = Array(repeating: Array(repeating: -1, count: n), count: m)
    
    func dfs(_ y: Int = 0, _ x: Int = 0) -> Int {
        if y == m - 1, x == n - 1 {
            return 1
        }
        
        if dp[y][x] != -1 {
            return dp[y][x]
        }
        
        dp[y][x] = 0
        
        for d in dir {
            let (ny, nx) = (y + d.y, x + d.x)
            
            if ny < 0 || ny >= m || nx < 0 || nx >= n {
                continue
            }
            
            if land[y][x] > land[ny][nx] {
                dp[y][x] += dfs(ny, nx)
            }
        }
        
        return dp[y][x]
    }
    
    
    print(dfs())
}

/// 내리막 길 https://www.acmicpc.net/problem/1520
func Q_1520_recursiveOnly() {
    let size = readLine()!.split(separator: " ").map { Int($0)! }
    let (m, n) = (size[0], size[1])
    let land = (0..<m).map { _ in readLine()!.split(separator: " ").map { Int($0)! }}
    var count = 0
    let dir: [(y: Int, x: Int)] = [(0, 1), (1, 0), (0, -1), (-1, 0)]
    
    func dfs(_ y: Int = 0, _ x: Int = 0) {
        if y == m - 1, x == n - 1 {
            count += 1
            return
        }
        
        for d in dir {
            let (ny, nx) = (y + d.y, x + d.x)
            
            if ny < 0 || ny >= m || nx < 0 || nx >= n {
                continue
            }
            
            if land[y][x] > land[ny][nx] {
                dfs(ny, nx)
            }
        }
    }
    
    dfs()
    print(count)
}

/*
 [풀이] https://velog.io/@jxlhe46/백준-1520번.-내리막길
 DFS(재귀)스러운 문제이나 시간 초과 이슈로 DP를 결합해야 한다.
 - DFS 풀이: 코드 참조
 - DFS -> DP
   - dp[a][b] = c
      - (a, b)에서 (m - 1, n - 1)까지 c개의 경로로 도달할 수 있다.
   - DP 테이블 (-1)로 초기화: 탐색한 적 없음을 의미, 0은 해당 지점까지 갈 수 있는 방법이 0개라는 의미
   - DFS 함수에 리턴 타입 Int 추가
   - 원래 종료 조건에서 return 1로 변경
   - 원래 종료 조건 외에, dp에서 읽어서 이미 탐색했다면 빠져나갈 수 있는 리턴지점 및 최후의 리턴 지점 추가
     - DP[y][x]를 반환
   - 함수 시작할 때마다 dp[y][x] = 0으로 초기화 (=> 링크 참조)
   - dfs(ny, nx)를 dp[y][x] += dfs(ny, nx)로 변경 (=> DFS에서 재귀되면서 리턴하는 값이 DP 테이블에 저장할 값)
 - 재귀 호출에 따라 DP 테이블이 변화하는 과정
   - 링크에서 그림 보고 분석
   - "함수가 리턴을 하면, 안쪽 프레임이 하나씩 삭제된다고 보면 된다. 그러면서 리턴값은 바로 바깥쪽 프레임에 반영된다."
     ...
   - "(3, 3)에 도달하면 현재 dp 테이블에 채워진 값이 -1이 아니기 때문에 (b)에서 dp[x][y] 자체를 리턴한다."
   - "그 리턴값은 바로 이전 스택 프레임에 반영된다."
     ...
   - "자신보다 작은 값을 발견할 때마다 재귀 호출하다가 (1, 3)에 도달하면 dp 테이블에 이미 저장된 값이 있기 때문에 더 이상 탐색을 진행하지 않고 dp[1][3]을 그대로 반환한다."
   - "재귀 호출을 했던 순서의 역방향으로 dp 테이블에 리턴값이 더해지게 되고, 결과적으로 (0, 0)으로 돌아와서 dp[0][0]에 저장된 3이 리턴되어 결과가 출력된다."
 
 ----------
 
 여행을 떠난 세준이는 지도를 하나 구하였다. 이 지도는 아래 그림과 같이 직사각형 모양이며 여러 칸으로 나뉘어져 있다. 한 칸은 한 지점을 나타내는데 각 칸에는 그 지점의 높이가 쓰여 있으며, 각 지점 사이의 이동은 지도에서 상하좌우 이웃한 곳끼리만 가능하다.
 
 +----+----+----+----+----+
 | 50 | 45 | 37 | 32 | 30 |
 +----+----+----+----+----+
 | 35 | 50 | 40 | 20 | 25 |
 +----+----+----+----+----+
 | 30 | 30 | 25 | 17 | 28 |
 +----+----+----+----+----+
 | 27 | 24 | 22 | 15 | 10 |
 +----+----+----+----+----+
 
 현재 제일 왼쪽 위 칸이 나타내는 지점에 있는 세준이는 제일 오른쪽 아래 칸이 나타내는 지점으로 가려고 한다. 그런데 가능한 힘을 적게 들이고 싶어 항상 높이가 더 낮은 지점으로만 이동하여 목표 지점까지 가고자 한다. 위와 같은 지도에서는 다음과 같은 세 가지 경로가 가능하다.
 
 (1) 50 ----> 27 -----> 10 (아래로 쭉 이동 후 오른쪽으로)
 (2) 50 ---> 32 ---> 15 --> 10 (오른쪽으로 이동하다 32에서 15까지 간 뒤 10으로)
 (3) 50 ----> 30 --> 25 --> 20 ---> 15 --> 10 (오른쪽 끝까지 이동해서 밑으로 한칸 이동했다 왼쪽으로 한 칸 가서 15까지 이동 후 10으로)
 
 지도가 주어질 때 이와 같이 제일 왼쪽 위 지점에서 출발하여 제일 오른쪽 아래 지점까지 항상 내리막길로만 이동하는 경로의 개수를 구하는 프로그램을 작성하시오.

 입력
 첫째 줄에는 지도의 세로의 크기 M과 가로의 크기 N이 빈칸을 사이에 두고 주어진다. 이어 다음 M개 줄에 걸쳐 한 줄에 N개씩 위에서부터 차례로 각 지점의 높이가 빈 칸을 사이에 두고 주어진다. M과 N은 각각 500이하의 자연수이고, 각 지점의 높이는 10000이하의 자연수이다.

 출력
 첫째 줄에 이동 가능한 경로의 수 H를 출력한다. 모든 입력에 대하여 H는 10억 이하의 음이 아닌 정수이다.

 예제 입력 1
 4 5
 50 45 37 32 30
 35 50 40 20 25
 30 30 25 17 28
 27 24 22 15 10
 
 예제 출력 1
 3
 */
