//
//  1717.swift
//  AlgorithmTest-ReadLine
//
//  Created by 윤범태 on 4/16/2024.
//
//  1: 집합의 표현 https://www.acmicpc.net/problem/1717
//

import Foundation

/// 집합의 표현 https://www.acmicpc.net/problem/1717
func Q_1717() {
    func find(_ x: Int) -> Int {
        if x == unf[x] {
            return x
        }
        
        unf[x] = find(unf[x])
        return unf[x]
    }
    
    func union(_ x: Int, _ y: Int) {
        let (x, y) = (find(x), find(y))
        
        guard x != y else {
            return
        }
        
        if x < y {
            unf[y] = x
        } else {
            unf[x] = y
        }
    }
    
    let c = readLine()!.split(separator: " ").map { Int($0)! }
    let (n, m) = (c[0], c[1])
    
    // 배열 초기화 필수
    var unf = Array(0...n)
    
    var result = ""
    for _ in 0..<m {
        let c = readLine()!.split(separator: " ").map { Int($0)! }
        
        switch c[0] {
        case 0:
            union(c[1], c[2])
        case 1:
            result += "\(find(c[1]) == find(c[2]) ? "YES" : "NO")\n"
        default:
            break
        }
    }
    
    print(result)
}

/*
 [풀이]
 - 유니온 파인드(Disjoint sets)로 해결
 - 집합을 합칠 때: union(a, b) 이용
 - 같은 집합에 포함되었는지 확인할 때: find(a) == find(b)의 결과를 이용
 
 [해설] https://brenden.tistory.com/33
 ① 유니온 파인드란?
 ▷ 대표적 그래프 알고리즘으로 '합집합 찾기'라는 의미
 ▷ 상호 배타적 집합(Disjoint-set)이라고도 함
 ▷ 여러 노드가 존재할 때, 두 개의 노드를 선택해서, 현재 두 노드가 서로 같은 그래프에 속하는지 판별하는 알고리즘이다.
 ▷ 2가지 연산으로 구성
    ▶ Find : x가 어떤 집합에 포함되어 있는지 찾는 연산
    ▶ Union : x와 y가 포함되어 있는 집합을 합치는 연산
 
 ② 그림으로 보는 Union-Find
 <초기화>
 +------+---+---+---+---+---+---+---+---+
 |   i  | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 |
 +------+---+---+---+---+---+---+---+---+
 | p[i] | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 |
 +------+---+---+---+---+---+---+---+---+
 
  - 모두 연결되지 않고 각자 자기 자신만을 집합의 원소로 가지고 있을 때,
  - 모든 값이 자기 자신을 가리키도록 초기호
  - i : 노드번호, P[i] : 부모 노드 번호 를 의미
   => 자기 자신이 어떤 부모에 포함되어 있는지를 의미합니다.

 정리하면, Parent[i] = i로 간단히 표현할 수 있습니다.
 
 (1) Union(1,2); Union(3,4)
 
 1   3   5 6 7 8
  \   \
   2   4
 
 +------+---+---+---+---+---+---+---+---+
 |   i  | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 |
 +------+---+---+---+---+---+---+---+---+
 | p[i] | 1 | 1 | 3 | 3 | 5 | 6 | 7 | 8 |
 +------+---+---+---+---+---+---+---+---+
 
  - 2번째 인덱스에 '1'이 들어가고, 4번 인덱스에 '3'이 들어간다
  - 합침(Union) 과정: 부모를 합칠 때는 일반적으로 더 **작은** 값 쪽으로 합침
 
  (2) Union(1, 2); Union(2, 3)
 
 +------+---+---+---+---+---+---+---+---+
 |   i  | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 |
 +------+---+---+---+---+---+---+---+---+
 | p[i] | 1 | 1 | 2 | 4 | 5 | 6 | 7 | 8 |
 +------+---+---+---+---+---+---+---+---+
 
  - 1과 3은 부모가 다르기 때문에 (1, 2) '1과 3이 연결되었는지' 파악하기 어렵다.
  - 재귀함수를 사용

 3의 부모인 2를 먼저 찾고, 2의 부모인 1을 찾아, 결과적으로 3의 부모는 1이 되는 것을 파악.
 Union의 과정이 수행된 후에는 다음과 같은 표로 변경됨
 +------+---+---+---+---+---+---+---+---+
 |   i  | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 |
 +------+---+---+---+---+---+---+---+---+
 | p[i] | 1 | 1 | 1 | 4 | 5 | 6 | 7 | 8 |
 +------+---+---+---+---+---+---+---+---+
 
 - 1,2,3의 부모는 모두 1이기 때문에 이 세 가지 노드는 모두 같은 그래프에 속한다.
 
 --------
 
 초기에 n+1개의 집합 {0}, {1}, {2}, ... , {n}이 있다. 여기에 합집합 연산과, 두 원소가 같은 집합에 포함되어 있는지를 
 확인하는 연산을 수행하려고 한다.

 집합을 표현하는 프로그램을 작성하시오.
 
 입력
 
 첫째 줄에 n,m 이 주어진다. m은 입력으로 주어지는 연산의 개수이다. 다음 m개의 줄에는 각각의 연산이 주어진다.
 합집합은 0 a b 의 형태로 입력이 주어진다. 이는 a가 포함되어 있는 집합과, b가 포함되어 있는 집합을 합친다는 의미이다.
 두 원소가 같은 집합에 포함되어 있는지를 확인하는 연산은 1 a b의 형태로 입력이 주어진다.
 이는 a와 b가 같은 집합에 포함되어 있는지를 확인하는 연산이다.

 출력
 1로 시작하는 입력에 대해서 a와 b가 같은 집합에 포함되어 있으면 "YES" 또는 "yes"를,
 그렇지 않다면 "NO" 또는 "no"를 한 줄에 하나씩 출력한다.

 제한
 1 ≤ n ≤ 1,000,000
 1 ≤ m ≤ 100,000
 0 ≤ a, b ≤ n
 a, b는 정수
 a, b는 같을 수도 있다.
 
 예제 입력 1
 7 8
 0 1 3
 1 1 7
 0 7 6
 1 7 1
 0 3 7
 0 4 2
 0 1 1
 1 1 1
 
 예제 출력 1
 NO
 NO
 YES
 */
