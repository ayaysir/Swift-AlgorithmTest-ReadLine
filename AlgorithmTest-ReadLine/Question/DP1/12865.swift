//
//  12865.swift
//  AlgorithmTest-ReadLine
//
//  Created by 윤범태 on 3/19/24.
//

import Foundation

/// 평범한 배낭 - 2차원 DP - 148292KB 308ms
func Q_12865_() {
    let r = readLine()!.split(separator: " ").map { Int($0)! }
    let (n, k) = (r[0], r[1])
    var dp = Array(repeating: Array(repeating: 0, count: k+1), count: n+1)
    var stuffs: [(w: Int, v: Int)] = [(-1, -1)]
    
    for _ in 0..<n {
        // withUnsafeBytes: array to tuple
        stuffs.append(
            readLine()!
                .split(separator: " ")
                .map { Int($0)! }
                .withUnsafeBytes { $0.bindMemory(to: (w: Int, v: Int).self)[0] }
        )
    }
    
    for i in stride(from: 1, through: n, by: 1) {
        let (weight, value) = stuffs[i]
        
        for j in stride(from: 1, through: k, by: 1) {
            if weight > j {
                dp[i][j] = dp[i-1][j]
            } else {
                dp[i][j] = max(dp[i-1][j], dp[i-1][j-weight] + value)
            }
        }
    }
    
    print(dp[n][k])
}

/// 평범한 배낭 - 1차원 DP - 69888KB 196ms
func Q_12865() {
    let r = readLine()!.split(separator: " ").map { Int($0)! }
    let (n, k) = (r[0], r[1])
    var dp = Array(repeating: 0, count: k+1)
    var stuffs: [(w: Int, v: Int)] = [(-1, -1)]
    
    for _ in 0..<n {
        // withUnsafeBytes: array to tuple
        stuffs.append(
            readLine()!
                .split(separator: " ")
                .map { Int($0)! }
                .withUnsafeBytes { $0.bindMemory(to: (w: Int, v: Int).self)[0] }
        )
    }
    
    for i in stride(from: 1, through: n, by: 1) {
        let (weight, value) = stuffs[i]
        
        var j = k
        while j - weight >= 0 {
            dp[j] = max(dp[j], dp[j-weight] + value)
            j -= 1
        }
    }
    
    print(dp[k])
}

/*
 [풀이] https://st-lab.tistory.com/141
 k = 7 이고,
 (Wi, Vi) = (6, 13), (4, 8), (3, 6), (5, 12) 인 경우
 +-----+---+---+---+---+---+----+----+----+
 | i\k | 0 | 1 | 2 | 3 | 4 | 5  | 6  | 7  |
 +=====+===+===+===+===+===+====+====+====+
 | 0   | - | - | - | - | - | -  | -  | -  |
 +-----+---+---+---+---+---+----+----+----+
 | 1   | 0 | 0 | 0 | 0 | 0 | 0  | 13 | 13 |
 +-----+---+---+---+---+---+----+----+----+
 | 2   | 0 | 0 | 0 | 0 | 8 | 8  | 13 | 13 |
 +-----+---+---+---+---+---+----+----+----+
 | 3   | 0 | 0 | 0 | 6 | 8 | 8  | 13 | 14 |
 +-----+---+---+---+---+---+----+----+----+
 | 4   | 0 | 0 | 0 | 6 | 8 | 12 | 13 | 14 |
 +-----+---+---+---+---+---+----+----+----+
 세로축 i: 물건 순서
 가로축 k: 최대로 견딜 수 있는 무게, 예를 들어 3이면 3kg까지 견딜 수 있는 환경
 칸: 최대 가치
 
 dp[3][3] => 3kg까지 견딜 수 있는 경우 stuffs[3] = (3, 6) 을 넣을 수 있으므로 6을 적는다.
 dp[3][4] => 3kg까지 견딜 수 있는 경우 stuffs[4] = (5, 12)는 넣을 수 없음
  - 넣을 수 없다면 i=3번째에 탐색했던 값이 최대 가치이므로 i=3=(4-1) 번째 가치를 그대로 내려받는다.
 
 dp[2][4] => 4kg까지 견딜 수 있는 경우 packs[2] = (4, 8) 을 넣을 수 있으므로 8을 적는다.
 dp[3][4] => stuffs[3]은 (3, 6)으로 들어갈 수 있지만 가치가 8보다 낮으므로 그냥 8을 내려받는다.
 dp[4][4] => (5, 12)는 들어갈 수 없으므로 8을 내려받는다.
 
 dp[4][5] => 위의 8보다 (5, 12)의 가치가 더 높으므로 12를 적는다.
 
 dp[3][7] => (3, 6)은 가치가 6이지만, 7kg - 3kg = 4kg를 더 적재할 수 있으므로
  - dp[3][7-3=4] 번째의 최대 가치 8과 현재 물건의 가치 6을 더한다.
  - 위의 13과 비교했을 때 14의 가치가 더 높다. => 14를 적는다.
 dp[4][7] => (5, 12)은 가치가 12이지만, 7kg - 5kg = 2kg를 더 적재할 수 있으므로
  - dp[4][7-5=2] 번째의 최대 가치 0과 현재 물건의 가치 12을 더한다.
  - 위의 14와 비교했을 때 가치가 낮으므로 그냥 14를 내려받는다.
 
 [심화] DP 배열을 1차원으로 축소
 
 k = 7 이고,
 (Wi, Vi) = (6, 13), (4, 8), (3, 6), (5, 12) 인 경우
 +-----+---+---+---+---+---+----+----+----+
 | k   | 0 | 1 | 2 | 3 | 4 | 5  | 6  | 7  |
 +=====+===+===+===+===+===+====+====+====+
 | v   | 0 | 0 | 0 | 6 | 8 | 12 | 13 | 14 |
 +-----+---+---+---+---+---+----+----+----+
 
 위와 같이 짜부시킬 수 있다.
 
 -------------
 
 평범한 배낭 https://www.acmicpc.net/problem/12865
 
 문제
 이 문제는 아주 평범한 배낭에 관한 문제이다.

 한 달 후면 국가의 부름을 받게 되는 준서는 여행을 가려고 한다. 세상과의 단절을 슬퍼하며 최대한 즐기기 위한 여행이기 때문에, 가지고 다닐 배낭 또한 최대한 가치 있게 싸려고 한다.

 준서가 여행에 필요하다고 생각하는 N개의 물건이 있다. 각 물건은 무게 W와 가치 V를 가지는데, 해당 물건을 배낭에 넣어서 가면 준서가 V만큼 즐길 수 있다. 아직 행군을 해본 적이 없는 준서는 최대 K만큼의 무게만을 넣을 수 있는 배낭만 들고 다닐 수 있다. 준서가 최대한 즐거운 여행을 하기 위해 배낭에 넣을 수 있는 물건들의 가치의 최댓값을 알려주자.

 입력
 첫 줄에 물품의 수 N(1 ≤ N ≤ 100)과 준서가 버틸 수 있는 무게 K(1 ≤ K ≤ 100,000)가 주어진다. 두 번째 줄부터 N개의 줄에 거쳐 각 물건의 무게 W(1 ≤ W ≤ 100,000)와 해당 물건의 가치 V(0 ≤ V ≤ 1,000)가 주어진다.

 입력으로 주어지는 모든 수는 정수이다.

 출력
 한 줄에 배낭에 넣을 수 있는 물건들의 가치합의 최댓값을 출력한다.

 예제 입력 1
4 7
6 13
4 8
3 6
5 12
 
 예제 출력 1
 14
 
 */
