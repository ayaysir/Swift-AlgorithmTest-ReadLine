//
//  1149.swift
//  AlgorithmTest-ReadLine
//
//  Created by 윤범태 on 3/18/24.
//

import Foundation

func Q_1149() {
    let (R, G, B) = (0, 1, 2)
    let n = Int(readLine()!)!
    /*
     [
        [R, G, B],
        [R, G, B],
        ...
        [R, G, B],
     ]
     */
    var dp = Array(repeating: [Int](), count: n)
    
    for i in 0..<n {
        dp[i] = readLine()!.split(separator: " ").map { Int($0)! }
    }
    
    for i in 1..<n {
        dp[i][R] += min(dp[i - 1][G], dp[i - 1][B])
        dp[i][G] += min(dp[i - 1][R], dp[i - 1][B])
        dp[i][B] += min(dp[i - 1][R], dp[i - 1][G])
    }
    
    print(dp.last!.min()!)
}

/*
 [풀이] https://st-lab.tistory.com/128
 
 +-------+-----+-----+-----+
 |       | R   | G   | B   |
 +-------+-----+-----+-----+
 | 1번집  | 1   | 100 | 103 |
 +-------+-----+-----+-----+
 | 2번집  | 1   | 103 | 200 |
 +-------+-----+-----+-----+
 | 3번집  | 100 | 1   | 200 |
 +-------+-----+-----+-----+
 
 - case 1: 1번집 1(R부터 시작) -> 2번집 103 -> 3번집 100 해서 총합 204이나 이것은 정답이 아님
 - case 2: 1번집 100(R부터 시작) -> 2번집 1 -> 3번집 1 해서 총합 102이 나와야 정답
 - 결과적으로 각 집의 최솟값을 찾아 누적합을 구하는 것이 아닌 모든 경로의 경우의 수를 찾아서 최종적으로 작은 누적합을 찾아야 한다.
 
 위 과정을 일반화한 표는 아래와 같다. (단, R = 0, G = 1, B = 2)
 +-------+----------------------------+----------------------------+----------------------------+
 |       |              R             |              G             |              B             |
 +-------+----------------------------+----------------------------+----------------------------+
 | 1번집  |          dp[1][R]          |          dp[1][G]          |          dp[1][B]          |
 +-------+----------------------------+----------------------------+----------------------------+
 | 2번집  | += min(dp[1][G], dp[1][B]) | += min(dp[1][R], dp[1][B]) | += min(dp[1][R], dp[1][G]) |
 +-------+----------------------------+----------------------------+----------------------------+
 |   ⋮   |              ⋮              |              ⋮             |              ⋮             |
 +-------+----------------------------+----------------------------+----------------------------+
 | i번집  |     += min(dp[i-1][G],     |     += min(dp[i-1][R],     |      += min(dp[i-1][R],    |
 |       |         dp[i-1][B])        |         dp[i-1][B])        |        dp[i-1][G])         |
 +-------+----------------------------+----------------------------+----------------------------+
 
 즉, 점화식으로 본다면 N에 대하여 세 가지 케이스에 대해 다음과 같다.


 Red일 경우
 Cost[N][0] = min( Cost[N-1][1], Cost[N-1][2] ) + Cost[N][0]

 Green일 경우
 Cost[N][1] = min( Cost[N-1][0], Cost[N-1][2] ) + Cost[N][1]

 Blue일 경우
 Cost[N][2] = min( Cost[N-1][0], Cost[N-1][1] ) + Cost[N][2]
 
 ---------------
 
 RGB거리 https://www.acmicpc.net/problem/1149
 
 문제
 RGB거리에는 집이 N개 있다. 거리는 선분으로 나타낼 수 있고, 1번 집부터 N번 집이 순서대로 있다.

 집은 빨강, 초록, 파랑 중 하나의 색으로 칠해야 한다. 각각의 집을 빨강, 초록, 파랑으로 칠하는 비용이 주어졌을 때, 아래 규칙을 만족하면서 모든 집을 칠하는 비용의 최솟값을 구해보자.

 1번 집의 색은 2번 집의 색과 같지 않아야 한다.
 N번 집의 색은 N-1번 집의 색과 같지 않아야 한다.
 i(2 ≤ i ≤ N-1)번 집의 색은 i-1번, i+1번 집의 색과 같지 않아야 한다.
 입력
 첫째 줄에 집의 수 N(2 ≤ N ≤ 1,000)이 주어진다. 둘째 줄부터 N개의 줄에는 각 집을 빨강, 초록, 파랑으로 칠하는 비용이 1번 집부터 한 줄에 하나씩 주어진다. 집을 칠하는 비용은 1,000보다 작거나 같은 자연수이다.

 출력
 첫째 줄에 모든 집을 칠하는 비용의 최솟값을 출력한다.

 예제 입력 1
3
26 40 83
49 60 57
13 89 99
 예제 출력 1
 96
 
 예제 입력 2
3
1 100 100
100 1 100
100 100 1
 예제 출력 2
 3
 
 예제 입력 3
3
1 100 100
100 100 100
1 100 100
 예제 출력 3
 102
 
 예제 입력 4
6
30 19 5
64 77 64
15 19 97
4 71 57
90 86 84
93 32 91
 예제 출력 4
 208
 
 예제 입력 5
8
71 39 44
32 83 55
51 37 63
89 29 100
83 58 11
65 13 15
47 25 29
60 66 19
 예제 출력 5
 253
 
 */
