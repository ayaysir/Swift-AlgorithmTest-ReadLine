//
//  1009.swift
//  AlgorithmTest-ReadLine
//
//  Created by 윤범태 on 4/6/24.
//

import Foundation

/// 분산처리 https://www.acmicpc.net/problem/1009
/// 79516KB    12ms
func Q_1009() {
    func powInt(_ a: Int, _ x: Int) -> Int {
        Int(pow(Double(a), Double(x)))
    }

    var result = ""
    for _ in (0..<Int(readLine()!)!) {
        let r = readLine()!.split(separator: " ").map { Int($0)! }
        let c = powInt(r[0], (r[1] - 1) % 4 + 1) % 10
        result.write("\(c == 0 ? 10 : c)\n")
    }

    print(result)
}

/// 분산처리 https://www.acmicpc.net/problem/1009
/// 69104KB    8ms
func Q_1009_() {
    for _ in (0..<Int(readLine()!)!) {
        let r = readLine()!.split(separator: " ").map { Int($0)! }
        let (a, b) = (r[0] % 10, (r[1] - 1) % 4 + 1)
        let c: Int = (0..<b).reduce(1) { acc, _ in  acc * a % 10 }
        print("\(c == 0 ? 10 : c)")
    }
}

/// 분산처리 https://www.acmicpc.net/problem/1009
/// 69104KB    828ms
func Q_1009__() {
    for _ in (0..<Int(readLine()!)!) {
        let r = readLine()!.split(separator: " ").map { Int($0)! }
        let c: Int = (0..<r[1]).reduce(1) { acc, _ in  acc * (r[0] % 10) % 10 }
        print("\(c == 0 ? 10 : c)")
    }
}

func Q_1009_실패() {
    func powInt(_ a: Int, _ x: Int) -> Int {
        Int(pow(Double(a), Double(x)))
    }
    
    var result = ""
    for _ in (0..<Int(readLine()!)!) {
        // 9^(635%4) % 4 = 9
        let r = readLine()!.split(separator: " ").map { Int($0)! }
        let c = powInt(r[0], r[1] % 4 == 0 ? r[1] % 10 : r[1] % 4) % 10
        result.write("\(c == 0 ? 10 : c)\n")
    }
    
    print(result)
}

/*
 [주의]
 - 결과가 0인 경우 10번으로 출력해야 한다
 - (% 4)를 해야 하되, 지수가 4의 배수인 경우를 유의
 - 실패 코드에서 지수가 4의 배수인 경우를 회피하려고 삼항연산자를 사용했으나 4의 배수이면서 10의 배수인 경우를 피할 수 없음
 => 지수에 % 4를 하되 4의 배수가 걸리지 않도록 (-1), (+1)을 해줘야됨
 
 [풀이] https://velog.io/@jacob3015/백준-1009번-분산처리
 - 지수를 곱할 때 ( % 4 )를 해야 한다:
 <a의 1의 자릿수가 1열인 경우, a의 거듭제곱의 1의 자릿수의 패턴>
 예) 4^3 = 64이므로 1의 자리수는 4
 +---+---+---+---+
 | 1 | 2 | 3 | 4 |
 +===+===+===+===+
 | 1 | 1 | 1 | 1 |
 +---+---+---+---+
 | 2 | 4 | 8 | 6 |
 +---+---+---+---+
 | 3 | 9 | 7 | 1 |
 +---+---+---+---+
 | 4 | 6 | 4 | 6 |
 +---+---+---+---+
 | 5 | 5 | 5 | 5 |
 +---+---+---+---+
 | 6 | 6 | 6 | 6 |
 +---+---+---+---+
 | 7 | 9 | 3 | 1 |
 +---+---+---+---+
 | 8 | 4 | 2 | 6 |
 +---+---+---+---+
 | 9 | 1 | 9 | 1 |
 +---+---+---+---+
 
 - 단, 지수가 4의 배수인 경우를 고려
  예) 단순히 % 4를 한 경우
  4^4 % 10 = 6이어야 정답이나
  4^(4%4) % 10 = 4^0 % 10 = 1이 되므로 오류
 
  이를 회피하기 위해 지수 1을 뺀 뒤 그 결과에 다시 1을 더함
    => (% 4)를 구하면서 반드시 4의 배수가 0이 되는 것을 회피할 수 있음
  4^((4-1) % 4 + 1) % 10 = 4^4 % 10 = 6
 
 ----------
 
 재용이는 최신 컴퓨터 10대를 가지고 있다. 어느 날 재용이는 많은 데이터를 처리해야 될 일이 생겨서 각 컴퓨터에 1번부터 10번까지의 번호를 부여하고, 10대의 컴퓨터가 다음과 같은 방법으로 데이터들을 처리하기로 하였다.

 1번 데이터는 1번 컴퓨터, 2번 데이터는 2번 컴퓨터, 3번 데이터는 3번 컴퓨터, ... ,

 10번 데이터는 10번 컴퓨터, 11번 데이터는 1번 컴퓨터, 12번 데이터는 2번 컴퓨터, ...

 총 데이터의 개수는 항상 ab개의 형태로 주어진다. 재용이는 문득 마지막 데이터가 처리될 컴퓨터의 번호가 궁금해졌다. 이를 수행해주는 프로그램을 작성하라.

 입력
 입력의 첫 줄에는 테스트 케이스의 개수 T가 주어진다. 그 다음 줄부터 각각의 테스트 케이스에 대해 정수 a와 b가 주어진다. (1 ≤ a < 100, 1 ≤ b < 1,000,000)

 출력
 각 테스트 케이스에 대해 마지막 데이터가 처리되는 컴퓨터의 번호를 출력한다.
 
 분류
 - 수학
 - 구현

 예제 입력 1
 5
 1 6
 3 7
 6 2
 7 100
 9 635
 
 예제 출력 1
 1
 7
 6
 1
 9
 */
